use actions as actionspec.
use predicates as knowledge.



order=linearall.
exit=always.


% Module to build student housing when we have enough budget.
module normalMod {

	
	% When we dont know where to build or we have an empty list
	% we ask the connector where to build.
	if bel(relevant_areas(0, []); not(relevant_areas(0, _List))),
		goal(goalBuildStudentHousing)
	then get_relevant_areas(0, build, []).
	
	% If we know where to build, and we need more luxury student housing,
	% start building and update the list of multipolys.
	% We also select a random luxury student building to build.
	if bel(relevant_areas(0,[[Poly|Y]|Rest]),
		needLuxuryHousing,
		luxuryHousingIds(Idlist),
		random_member(Id,Idlist))
	then building_plan_construction(Id,4,Poly)
		+ delete(relevant_areas(0,[[Poly|Y]|Rest]))
		+ insert(relevant_areas(0,Rest)).
	
	% If we know where to build, and we need more medium student housing,
	% start building and update the list of multipolys.
	% We also select a random medium student building to build.
	if bel(relevant_areas(0,[[Poly|Y]|Rest]),
		needMediumHousing,
		mediumHousingIds(Idlist),
		random_member(Id,Idlist))
	then building_plan_construction(Id,4,Poly)
		+ delete(relevant_areas(0,[[Poly|Y]|Rest]))
		+ insert(relevant_areas(0,Rest)).
	
	% If we know where to build, and we need more cheap student housing,
	% start building and update the list of multipolys.
	% We also select a random cheap student building to build.
	if bel(relevant_areas(0,[[Poly|Y]|Rest]),
		needCheapHousing,
		cheapHousingIds(Idlist),
		random_member(Id,Idlist))
	then building_plan_construction(Id,4,Poly)
		+ delete(relevant_areas(0,[[Poly|Y]|Rest]))
		+ insert(relevant_areas(0,Rest)).
}
