use actions as actionspec.
use predicates as knowledge.



order=linear.
exit=always.


% Module to build student housing when we have enough budget.
module normalMod {

	
	% When we dont know where to build or we have an empty list
	% we ask the connector where to build.
	if bel(relevant_areas(0, [], []); not(relevant_areas(0, _List, _)))
		, goal(goalBuildStudentHousing)
	then get_relevant_areas(0, build, []).

	% If there are gardens to build, build these first.
	if bel(relevant_areas(0, Buildings, [[GardenMP|GardenArea]|GardenRest])
		, not(gardensBuilt))
	then building_plan_construction(440,1,GardenMP)
		+ delete(relevant_areas(0, Buildings, [[GardenMP|GardenArea]|GardenRest]))
		+ insert(relevant_areas(0, Buildings, GardenRest))
		+ insert(gardensBuilt).

	% If we know where to build, and we need more luxury student housing,
	% start building and update the list of multipolys.
	% We also select a random luxury student building to build.
	if goal(goalBuildLuxuryHousing)
		, bel(relevant_areas(0,[[Poly|Area]|Rest], GardenList)
		, luxuryHousingIds(Idlist)
		, random_member(Id,Idlist)
		, Area = [Area2]
		, getFloors(Area2,FloorsList)
		, random_member(Floors, FloorsList)
		, (GardenList = []; gardensBuilt))
	then building_plan_construction(Id,Floors,Poly)
		+ delete(relevant_areas(0,[[Poly|Area]|Rest], GardenList ))
		+ insert(relevant_areas(0,Rest, GardenList))
		+ delete(gardensBuilt).

	% If we know where to build, and we need more medium student housing,
	% start building and update the list of multipolys.
	% We also select a random medium student building to build.
	if goal(goalBuildMediumHousing)
		, bel(relevant_areas(0,[[Poly|Area]|Rest], GardenList)
		, mediumHousingIds(Idlist)
		, random_member(Id,Idlist)
		, Area = [Area2]
		, getFloors(Area2,FloorsList)
		, random_member(Floors, FloorsList)
		, (GardenList = []; gardensBuilt))
	then building_plan_construction(Id,Floors,Poly)
		+ delete(relevant_areas(0,[[Poly|Area]|Rest], GardenList ))
		+ insert(relevant_areas(0,Rest, GardenList))
		+ delete(gardensBuilt).

	% If we know where to build, and we need more cheap student housing,
	% start building and update the list of multipolys.
	% We also select a random cheap student building to build.
	if goal(goalBuildCheapHousing)
		, bel(relevant_areas(0,[[Poly|Area]|Rest], GardenList)
		, cheapHousingIds(Idlist)
		, random_member(Id,Idlist)
		, Area = [Area2]
		, getFloors(Area2,FloorsList)
		, random_member(Floors, FloorsList)
		, (GardenList = []; gardensBuilt))
	then building_plan_construction(Id,Floors,Poly)
		+ delete(relevant_areas(0,[[Poly|Area]|Rest], GardenList ))
		+ insert(relevant_areas(0,Rest, GardenList))
		+ delete(gardensBuilt).

	if bel(relevant_areas(0, MultiPolygons, List))
	then delete(relevant_areas(0, MultiPolygons, List)).
}
